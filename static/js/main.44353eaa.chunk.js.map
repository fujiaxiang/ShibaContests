{"version":3,"sources":["assets/background.jpg","store/types.js","store/pictures/reducers.js","store/reducers.js","store/pictures/sagas.js","store/sagas.js","store/store.js","DogApp.js","store/pictures/actions.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","GET_PICS_REQUEST","GET_PICS_SUCCESS","GET_PICS_FAILURE","DEFAULT_STATE","pictures","showing","n_shown","isLoading","game_ended","winner","store_reducers","form","formReducer","Pictures","state","arguments","length","undefined","action","type","Object","objectSpread","payload","slice","push","getPictures","API","url","response","regenerator_default","a","wrap","_context","prev","next","concat","call","axios","get","sent","put","data","t0","console","error","stop","_marked","this","_callee","_context2","takeEvery","_marked2","store_sagas","middleware","sagaMiddleware","createSagaMiddleware","enhancer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","store_store","sagas","store","createStore","combineReducers","reducers","run","mark","configureSagaGenerator","all","map","saga","fork","BackgroundImage","styled","img","_templateObject","DogApp","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","total_pics","n_per_time","setState","choosePicture","_this2","react_default","createElement","src","bgimg","es_form","Item","label","input_number","min","max","defaultValue","onChange","value","className","alt","width","height","pic","key","onClick","e","selectWinnder","React","Component","mapDispatchToProps","count","connect","App","es","src_DogApp","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44353eaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.cc185bac.jpg\";","export const GET_PICS_REQUEST = 'GET_PICS_REQUEST';\nexport const GET_PICS_SUCCESS = 'GET_PICS_SUCCESS';\nexport const GET_PICS_FAILURE = 'GET_PICS_FAILURE';\n\nexport const CHOOSE_PICTURE = 'CHOOSE_PICTURE';","import {\n    GET_PICS_FAILURE, GET_PICS_SUCCESS, GET_PICS_REQUEST, CHOOSE_PICTURE\n} from '../types';\n\nconst DEFAULT_STATE = {\n    pictures: [],\n    showing: [],\n    n_shown: 0,\n    isLoading: false,\n    game_ended: false,\n    winner: ''\n};\n\nexport default (state = DEFAULT_STATE, action = {}) => {\n    switch (action.type) {\n        case GET_PICS_REQUEST: return {\n            ...state,\n            pictures: [],\n            isLoading: true,\n        };\n        case GET_PICS_SUCCESS: \n            var pictures = action.payload.slice()\n            var showing = pictures.slice();\n            if (state.winner){\n                showing.push(state.winner);\n            }\n            return {\n                ...state,\n                pictures: pictures,\n                showing: showing,\n                winner: state.winner,\n                n_shown: state.n_shown + pictures.length,\n                isLoading: false,\n            };\n        case GET_PICS_FAILURE: return {\n            ...state,\n            isLoading: false,\n        };\n        case CHOOSE_PICTURE: \n            return {\n                ...state,\n                winner: action.payload,\n            };\n        default: return state;\n    }\n}","import { reducer as formReducer } from 'redux-form';\nimport Pictures from './pictures/reducers';\n\nexport default {\n    form: formReducer,\n    Pictures,\n};\n","import { takeEvery, call, put } from 'redux-saga/effects';\nimport axios from 'axios';\nimport {\n    GET_PICS_FAILURE,\n    GET_PICS_REQUEST,\n    GET_PICS_SUCCESS,\n} from '../types';\n\nconst API = 'https://us-central1-react-training-101.cloudfunctions.net/api/shibes?';\n\nfunction* getPictures(action) {\n    try {\n        const url = API + `count=${action.payload}`;\n        const response = yield call(axios.get, url);\n        yield put({\n            type: GET_PICS_SUCCESS,\n            payload: response.data,\n        });\n    } catch (err) {\n        console.error(err);\n        yield put({ type: GET_PICS_FAILURE });\n    }\n}\n\nexport default function* () {\n    yield takeEvery(GET_PICS_REQUEST, getPictures);\n};\n","import Pictures from './pictures/sagas';\n\nexport default [\n    Pictures,\n];\n","import { createStore, combineReducers, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { all, fork } from 'redux-saga/effects';\nimport reducers from './reducers';\nimport sagas from './sagas';\n\nconst configureSaga = sagas => function* configureSagaGenerator() {\n    yield all(sagas.map(saga => fork(saga)));\n};\n\nlet middleware = [];\n\n// Create and add Redux Saga middleware\nconst sagaMiddleware = createSagaMiddleware();\nmiddleware.push(sagaMiddleware);\n\nconst enhancer = compose(\n    applyMiddleware(...middleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nexport default () => {\n    const store = createStore(\n        combineReducers(reducers),\n        enhancer,\n    );\n\n    // Apply sagas\n    sagaMiddleware.run(configureSaga(sagas));\n\n    return store;\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styled from 'styled-components';\nimport PropTypes from 'prop-types';\nimport { getPictures, choosePicture } from \"./store/pictures/actions\";\nimport { Form, InputNumber } from \"antd\";\n\nimport bgimg from \"./assets/background.jpg\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst BackgroundImage = styled.img`\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  min-width: 100%;\n  min-height: 100%;\n`;\n\nclass DogApp extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            total_pics: 10,\n            n_per_time: 2,\n            game_ended: false,\n        };\n    }\n\n    static propTypes = {\n        getPictures: PropTypes.func.isRequired,\n        choosePicture: PropTypes.func.isRequired,\n    }\n\n    // getPictures(n){\n    //     const url = API + `count=${n}`;\n    //     axios.get(url)\n    //     .then((response) => {\n    //         var pictures = response.data.slice();\n    //         if (this.state.winner){\n    //             pictures.push(this.state.winner);\n    //         }\n    //         this.setState((state, props) => ({\n    //             pictures: pictures,\n    //             n_shown: state.n_shown + response.data.length,\n    //         }));\n    //     })\n    //     .catch((error) => {\n    //         // handle error\n    //         console.log(error);\n    //     });\n    // };\n\n    componentDidMount(){\n        this.props.getPictures(this.state.n_per_time);\n    }\n\n    setWinner(url){\n        this.setState({\n            winner: url\n        });\n    }\n\n    selectWinnder(url){\n        // this.setWinner(url);\n        this.props.choosePicture(url);\n        if (this.props.n_shown < this.state.total_pics){\n            this.props.getPictures(this.state.n_per_time - 1);\n        } else {\n            this.setState({\n                game_ended: true,\n            })\n        }\n    }\n\n    render(){\n        return (\n            <div>\n                <BackgroundImage src={bgimg} />\n                <h1>Who has the cuteeeeest dog?</h1>\n                <p>How many pictures to show at a time?</p>\n                {/* <IntegerSlider min={2} max={4} default={2} \n                    onChange={(value) => this.setState({n_per_time: value})}\n                /> */}\n                \n                <Form>\n                    <Form.Item label=\"Dogs per Contest\">\n                        <InputNumber min={2} max={4} defaultValue={2} \n                            onChange={(value) => this.setState({n_per_time: value})}\n                        />\n                    </Form.Item>\n                    <Form.Item label=\"Total Contestants\">\n                        <InputNumber min={10} max={100} defaultValue={10} \n                            onChange={(value) => this.setState({total_pics: value})}\n                        />\n                    </Form.Item>\n                </Form>\n            \n                { \n                    this.state.game_ended ?\n                        <div className=\"winner\">\n                            <h2>Final Winner is HERE!</h2>\n                            <img \n                                src={this.props.winner} \n                                alt=\"Winner\"\n                                width=\"450\" \n                                height=\"450\" \n                            />\n                        </div>\n                    :\n                        <div className=\"d-flex justify-content-between pictures\">\n                            {\n                                this.props.showing.map(pic => \n                                    <div \n                                        key={pic} \n                                        onClick={e => this.selectWinnder(pic)}\n                                        className=\"d-flex align-items-center h100 m-r-1\"\n                                    >\n                                        <img \n                                            src={pic} \n                                            alt=\"Dog\" \n                                            width=\"280\" \n                                            height=\"280\" \n                                        />\n                                    </div>\n                                )\n                            }\n                        </div>\n                }\n                \n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    ...state.Pictures,\n});\n\nconst mapDispatchToProps = {\n    getPictures,\n    choosePicture,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DogApp);\n\n\n\n// const WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);","import {\n    GET_PICS_REQUEST,\n    CHOOSE_PICTURE,\n} from '../types';\n\nexport const getPictures = (count) => ({\n    type: GET_PICS_REQUEST,\n    payload: count,\n});\n\nexport const choosePicture = (url) => ({\n    type: CHOOSE_PICTURE,\n    payload: url,\n});\n","import \"antd/dist/antd.css\";\nimport './App.css';\nimport React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport DogApp from './DogApp';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store()}>\n        <DogApp /> \n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}